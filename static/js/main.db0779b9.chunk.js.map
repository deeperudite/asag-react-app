{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","data","FormData","target","g","self","assertThisInitialized","axios","url","method","then","response","grade","console","log","setState","catch","error","state","quest","stu_ans","ref_ans","model","handleInputChange","bind","value","type","checked","name","defineProperty","react_default","a","createElement","className","onSubmit","onChange","React","Component","App","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db0779b9.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quest: \"None\",\n      stu_ans: \"None\",\n      ref_ans: \"None\",\n      model: \"None\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(e) {\n    const target = e.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n\n    var g = \"\";\n    var self = this;\n    axios({\n      url: 'https://asag-api.herokuapp.com/',\n      method: 'post',\n      data: data,\n    })\n    .then(function (response) {\n      g = response.data.grade;\n      console.log(response);\n      self.setState({grade: g});\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Question: &nbsp;&nbsp;\n            <input\n              name=\"quest\"\n              type=\"text\"\n              checked={this.state.quest}\n              onChange={this.handleInputChange} />\n          </label>\n          <br /><br />\n          <label>\n            Reference Answer:&nbsp;&nbsp;\n            <input\n              name=\"ref_ans\"\n              type=\"text\"\n              checked={this.state.ref_ans}\n              onChange={this.handleInputChange} />\n          </label>\n          <br /><br />\n          <label>\n            Student Answer:&nbsp;&nbsp;\n            <input\n              name=\"stu_ans\"\n              type=\"text\"\n              checked={this.state.stu_ans}\n              onChange={this.handleInputChange} />\n          </label>\n          <br /><br />\n          <label>\n            Model:&nbsp;&nbsp;\n            <input\n            type=\"radio\"\n            name=\"model\"\n            value=\"classifier\"\n            checked={this.state.model === 'classifier'}\n            onChange={this.handleInputChange} /> Classifier\n            <input\n            type=\"radio\"\n            name=\"model\"\n            value=\"regressor\"\n            checked={this.state.model === 'regressor'}\n            onChange={this.handleInputChange} /> Regressor\n          </label>\n          <br /><br />\n          <label>\n          Get Grade &nbsp;&nbsp;\n            <input\n              value=\"Submit\"\n              type=\"submit\"/>\n          </label>\n        </form>\n        <br/><br/><hr/><br/><br/>\n        <div className=\"container-fluid\" name=\"grade\" value=\"\">Grade : &nbsp;&nbsp;{this.state.grade}</div>\n      </div>\n    )\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Form from './components/Form'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <center>\n          <h1> Short Answer Grading System </h1>\n          <Form />\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}